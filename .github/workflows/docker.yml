name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      
jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Récupérer le code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Configurer Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Étape 3 : Configurer Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Étape 4 : Installer les dépendances
      - name: Install dependencies
        run: npm install

      # Étape 5 : Exécuter les tests Jest
      - name: Run tests
        run: npx jest

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=YanisHlali_tp-devops \
            -Dsonar.organization=yanishlali \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.branch.name=main

  build-and-push:
    needs: build-and-analyze
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Récupérer le code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Configurer Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Étape 3 : Se connecter à DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Étape 4 : Construire et publier l'image Docker
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: yanishlali/node-app:latest

  deploy-to-k8s:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Récupérer le code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Vérifier Docker
      - name: Verify Docker Installation
        run: docker --version

      # Étape 3 : Installer Minikube
      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube

      # Étape 4 : Démarrer Minikube
      - name: Start Minikube
        env:
          MINIKUBE_IN_STYLE: false
        run: |
          minikube start --driver=docker

      # Étape 5 : Configurer kubectl
      - name: Configure kubectl
        run: |
          minikube kubectl -- get pods -A

      # Étape 6 : Valider et appliquer les fichiers Kubernetes
      - name: Validate Kubernetes manifests
        run: |
          kubectl apply --dry-run=client -f ./k8s/deployment.yaml
          kubectl apply --dry-run=client -f ./k8s/service.yaml
          kubectl apply --dry-run=client -f ./k8s/hpa.yaml

      - name: Deploy to Kubernetes
        run: |
          kubectl config use-context minikube
          kubectl apply -f ./k8s/deployment.yaml
          kubectl apply -f ./k8s/service.yaml
          kubectl apply -f ./k8s/hpa.yaml

          # Vérification des déploiements disponibles
          kubectl get deployments -n default

          # Mise à jour de l'image
          kubectl --namespace=default set image deployment/tasks-app tasks-app=yanishlali/node-app:latest
          kubectl --namespace=default rollout status deployment/tasks-app
